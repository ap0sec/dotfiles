% Intended LaTeX compiler: pdflatex
\documentclass[a4paper,titlepage]{jsarticle}
                                \usepackage{caption}
                \usepackage{url}
                \usepackage[dvipdfmx]{graphicx}
\author{小高 拓海}
\date{\today}
\title{実験4}
\begin{document}

\maketitle

\section{目的}
\label{sec:org0edad17}
実験1で学んだPLCプログラミングについて、より効率的な書き方を学ぶことで、さらに複雑な課題に対して適切に処理を行う手法を身につける。

\section{基礎知識}
\label{sec:orge04c204}
\subsection{モジュール化}
\label{sec:org4c65abb}
モジュール化とは、今まで一つのラダー図に全ての機能を実装していたものを、機能ごとにファイルを分け、別々に読み込むことによって、全体の可読性を向上させるものである。実際にモジュール化を利用し、課題2では主幹の処理部とXORの計算処理部に分割している。

\subsection{関数の利用}
\label{sec:orgd3aa24b}
KV-Studioには様々な便利な関数が用意されており、実験1で実装したフリッカをはじめ、四則演算やシフタ、PLCに搭載されたLCDに表示された時刻の設定など、1から実装すると複雑になってしまうものが簡単に実装できる。

\subsection{デバイスラベル変更}
\label{sec:org2ccb686}
レジスタ等には通常番号が振られているのみで、ラダー図を見た際、そのレジスタが何の役割を果たすものなのか読み取るのは難しい。そこで、レジスタごとにラベルを編集することで、例えば「R500」に対して「青LED 雨」のように、そのレジスタの役割を明確に示すことができ、可読性の向上につながる。この機能を用いて課題3を実装した。

\section{使用機器}
\label{sec:org4fa854d}
本実験における使用機器を表\ref{tab:orgf3ab622}に示す。

\begin{table}[htbp]
\caption{\label{tab:orgf3ab622}
使用機器}
\centering
\begin{tabular}{|c|c|c|c|}
\hline
機器名 & メーカー名 & 型番 & シリアルNo.\\
\hline
\hline
電源 & - & - & 4\\
PLCユニット & キーエンス & KV-1000 & 4\\
40ピンフラットケーブル & - & - & -\\
プラスドライバ & - & - & -\\
USBケーブル & - & typeA - typeB & -\\
入出力装置(スイッチ-LEDユニット) & - & - & 4\\
\hline
\end{tabular}
\end{table}

\section{課題内容}
\label{sec:orgde26de8}
\subsection{課題1：LED番号加算システム}
\label{sec:org4c8d2be}
この課題では、以下の要件を満たすシステムを作成した。

使用SW：SW1〜4
\begin{enumerate}
\item SW1〜4の任意のスイッチを2回押す
\item 1で押されたスイッチ番号を加算する
\item 2の結果に対応したLEDが点灯する
\end{enumerate}

この課題を作成するために、ADD関数を用いて押されたスイッチ番号を足し合わせて、その結果を用いて対応するLEDをSET関数で点灯させた。

課題指示書をリスト4.1に、システムを実装したラダー図を図4.1に示す。

\subsection{課題2： 点灯LED間補完点灯システム}
\label{sec:org05b3b9b}
この課題では、主に以下の要件を満たすシステムを作成した。

使用SW：SW1〜8
\begin{enumerate}
\item SW1〜8の任意のスイッチを2つ押す
\begin{itemize}
\item 押されたスイッチに対応したLEDはその時点で点灯
\end{itemize}
\item 1で点灯した2つのLEDに挟まれているLEDを全て点灯させる
\end{enumerate}

この課題の2を実現するために、スイッチを2個入力が終わった時点での、各LEDにおける自身とそれより左側にある全てのLEDについてXORをとるという方法をとった。多入力XORは、入力HIGHが奇数個あるときHIGHになるという特性があるため、XORの結果がHIGHになった場合は、自身より左でLEDが1つ点灯済み、つまり右側にあるもう1つによって自身は挟まれているという判定ができる。

ただし、8入力のXORをラダー図で表現するためには必要なスペースが大きく、一つのファイルに全てを書くと可読性が落ちると判断し、モジュール化を行った。

課題指示書をリスト4.2に、システムを実装したラダー図を図4.2に示す。

\subsection{課題3： 継続的な時間計測システム}
\label{sec:org74abb63}
この課題では、以下の要件を満たすシステムを作成した。

使用SW：SW9
\begin{enumerate}
\item SW9を押すと、タイマがリセットされる
\item SW9をもう一度押すと、前回SW9を押してからの経過時間がLCDに表示される
\end{enumerate}

この課題を作成するために、UDT(アップダウンタイマ)関数をカウントアップタイマとして用いた。SW9が入力されるたびにバッファへタイマの値を移し、タイマをリセットすることで、表示はバッファの中身を用いて行い、それと同時に次のSW9の入力に備えてタイマスタートすることができる。

この課題において、時：分：秒を求めるために、定数でタイマの中身を除算しているが、そのままだとただの割り算としかみることができないため可読性が低い。そこで、デバイスラベル変更によってその除算が何の役割を果たすものなのかを明確に示した。

課題指示書をリスト4.3に、システムを実装したラダー図を図4.3に示す。
\end{document}
